"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import analytics
import os
import sys
from pathlib import Path
from posixpath import join

import environ
#root = environ.Path(__file__)-3
# print(root)
env = environ.Env()

#environ.Env.read_env()
# print(env)
print(env.str('ENVIRONMENT')) 
LIVE = env.bool('LIVE')
# print(environ.Env.read_env())
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print(BASE_DIR)
BACKEND_DIR = BASE_DIR  # rename variable for clarity
FRONTEND_DIR = os.path.abspath(Path().resolve().parent) + '/frontend'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%=n5lj()_@v!!4vagvf2vw(8u%l!p3x!%^3ca#27#+4*gy$bpb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =True
#env.bool('DEBUG', default=True)
# print(DEBUG)
ALLOWED_HOSTS = ['localhost','*']

LOGIN_REDIRECT_URL = '/dashboard/'


def join_to_base_dir(path):
    return os.path.join(BASE_DIR, path)


IS_PRODUCTION = True if env.str('ENVIRONMENT') == 'production' else False
print(IS_PRODUCTION)
# Application definition
INSTALLED_APPS = [
    'grappelli',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    # 3rd-party libraries
    'health_check',
    'django_extensions',
    'localflavor',
    'rest_framework',
    'simple_history',
    'django_celery_beat',
    'django_celery_results',
    'django_json_widget',
    'fsm_admin',
    'storages',
    'anymail',
    'robots',
    'hijack',
    'compat',
    'hijack.contrib.admin',
    # 'hijack_admin',
    # project apps
    'apps.core',
    'apps.addresses',
    'apps.analytics',
    'apps.customers',
    'apps.billing',
    'apps.carts',
    'apps.discounts',
    'apps.fulfillment',
    # 'apps.subscriptions',
    'apps.products',
    'apps.recipes',
    'apps.orders',
    'apps.webhooks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
    'django.contrib.sites.middleware.CurrentSiteMiddleware',
    'hijack.middleware.HijackUserMiddleware',
]

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            join_to_base_dir('templates'),
            join_to_base_dir('apps/core'),
            join_to_base_dir('apps/orders'),
            join_to_base_dir('apps/customers'),
            join_to_base_dir('apps/billing'),
            join_to_base_dir('apps/fulfillment'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

HIJACK_ALLOW_GET_REQUESTS = True

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# if LIVE == True:
#     print("if")
#     DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': env.str('DB_NAME'),
#         'USER': env.str('POSTGRES_USER'),
#         'PASSWORD': env.str('POSTGRES_PASSWORD'),
#         'HOST': env.str('DB_HOST'),
#         'PORT': env.str('DB_PORT'),
#         }
#     }
# else:
#     print("elseeeeee", env.str('LOCAL_DB_HOST'), env.str('LOCAL_DB_NAME'))
#     DATABASES = {
#     'default': {
#         'ENGINE': "",
#         'NAME': env.str('LOCAL_DB_NAME'),
#         'USER': env.str('LOCAL_POSTGRES_USER'),
#         'PASSWORD': env.str('LOCAL_POSTGRES_PASSWORD'),
#         'HOST': env.str('LOCAL_DB_HOST'),
#         'PORT': env.str('LOCAL_DB_PORT'),
#         }
#     }



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env.str('POSTGRES_DB'),
        'USER': env.str('POSTGRES_USER'),
        'HOST': env.str('POSTGRES_HOST'),
        'PORT': env.str('POSTGRES_PORT'),
        'PASSWORD': env.str('POSTGRES_PASSWORD', 'postgres'),
    }
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': env.str('LOCAL_DB_NAME'),
#         'USER': env.str('LOCAL_POSTGRES_USER'),
#         'HOST': env.str('LOCAL_DB_HOST'),
#         'PORT': env.str('LOCAL_DB_PORT'),
#         'PASSWORD': env.str('LOCAL_POSTGRES_PASSWORD', 'postgres'),
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
AUTHENTICATION_BACKENDS = (
    'apps.customers.backends.CaseInsensitiveModelBackend', )

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGOUT_REDIRECT_URL = 'https://www.tinyorganics.com/'
APPEND_SLASH = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
REAL_STATIC_ROOT = join_to_base_dir('static')

# STATIC_ROOT = REAL_STATIC_ROOT

STATICFILES_DIRS = (
    REAL_STATIC_ROOT,
    join_to_base_dir('apps/core/static'),
)

# Media files
MEDIA_ROOT = join_to_base_dir('media')
MEDIA_URL = '/media/'

# Model-specific settings
AUTH_USER_MODEL = 'customers.Customer'

IS_TESTING = 'test' in sys.argv
TESTING = IS_TESTING

if not IS_TESTING:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env.str('CACHE_URL', default='redis://'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        },
        'celery': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env.str('CACHE_URL', default='redis://'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }

    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
    SESSION_CACHE_ALIAS = 'default'
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/var/tmp/django_cache',
        },
        'celery': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/var/tmp/django_cache',
        }
    }
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = 'default'

# Celery
CELERY_RESULT_BACKEND = env.str(
    'CELERY_RESULT_BACKEND_URL', default='redis://')
CELERY_BROKER_URL = env.str('CELERY_BROKER_URL', default='amqp://')
# see: https://docs.celeryproject.org/en/stable/userguide/configuration.html#worker-prefetch-multiplier
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Stripe
STRIPE_PUBLISHABLE_KEY = env.str('STRIPE_PUBLISHABLE_KEY', 'FAKE_KEY')
STRIPE_SECRET_KEY = env.str('STRIPE_SECRET_KEY', 'FAKE_KEY')

# Shopify
SHOPIFY_API_KEY = env.str('SHOPIFY_API_KEY', 'FAKE')
SHOPIFY_API_KEY_SECRET = env.str('SHOPIFY_API_KEY_SECRET', 'FAKE')
SHOPIFY_DOMAIN = env.str('SHOPIFY_DOMAIN', 'FAKE.com')
SHOPIFY_PASSWORD = env.str('SHOPIFY_PASSWORD', 'FAKE_PASS')
SHOPIFY_API_VERSION = env.str('SHOPIFY_API_VERSION', '2021-10')

# Whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
STATIC_HOST = env.str('DJANGO_STATIC_HOST', default='')
STATIC_URL = STATIC_HOST + '/static/'
MAX_AGE = 31536000

COLLECTSTATIC = 'collectstatic' in sys.argv

if COLLECTSTATIC and not env('ENVIRONMENT') == 'development':
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=600'}
    # s3 static settings
    AWS_LOCATION = 'static'

    STATIC_URL = f'{STATIC_HOST}{AWS_LOCATION}'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',
        # Any other renders
    ),
    'DEFAULT_PARSER_CLASSES': (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        'djangorestframework_camel_case.parser.CamelCaseFormParser',
        'djangorestframework_camel_case.parser.CamelCaseMultiPartParser',
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        # Any other parsers
    ),
    'JSON_UNDERSCOREIZE': {
        'no_underscore_before_number': True,
    },
}

DEFAULT_FROM_EMAIL = 'hello@tinyorganics.com'
SERVER_EMAIL = 'hello@tinyorganics.com'

if env.bool('USE_MAIL_BACKEND', False):
    EMAIL_BACKEND = 'anymail.backends.postmark.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

ANYMAIL = {
    "POSTMARK_SERVER_TOKEN": env.str('POSTMARK_API_KEY', default='FAKE'),
}


if 'development' not in env.str('ENVIRONMENT', 'development') and not IS_TESTING:
    # sentry
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=env.str('SENTRY_BACKEND_DSN', 'https://FAKE.com'),
        environment=env.str('ENVIRONMENT'),
        integrations=[DjangoIntegration()],
        traces_sample_rate=1.0,
        send_default_pii=True,
    )

SITE_ID = 1

SEGMENT_WRITE_KEY = env.str(
    'SEGMENT_WRITE_KEY', default='PUofOAst7yPI8is0AWhqAGl28xSbIHxg')
analytics.write_key = SEGMENT_WRITE_KEY

BLOCK_IMPORTED_CUSTOMERS = env.bool('BLOCK_IMPORTED_CUSTOMERS', default=True)

SITE_URL = env.str('SITE_URL', default='localhost:8000')

# Brightback
BRIGHTBACK_APP_ID: str = env.str('BRIGHTBACK_APP_ID', '123456')
if 'development' in env.str('ENVIRONMENT', 'development') or IS_TESTING:
    '''
    Brightback does not work with localhost, generate your own ngrok url
    while working locally
    '''
    BRIGHTBACK_BASE_REDIRECT_URL = '36cf-170-250-216-254.ngrok.io'
else:
    BRIGHTBACK_BASE_REDIRECT_URL = env.str('SITE_URL', 'FAKE')

BRIGHTBACK_CANCELLATION_ENABLED = env.str(
    'BRIGHTBACK_CANCELLATION_ENABLED', IS_TESTING)

RECURRING_ITEMS_TOGGLE_ENABLED = env.str('RECURRING_ITEMS_TOGGLE_ENABLED', False)

SHOW_VARIANTS_ENABLED = env.str('SHOW_VARIANTS_ENABLED', False)

YOTPO_ORDER_SYNC_ENABLED = env.str('YOTPO_ORDER_SYNC_ENABLED', not IS_PRODUCTION)

FILTER_RECIPES_BY_ZIPCODE = env.str('FILTER_RECIPES_BY_ZIPCODE', not IS_PRODUCTION)
